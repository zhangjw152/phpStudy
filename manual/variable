变量：
变量的命名规则为：^[a-zA-Z_\x7f-\xff][a-zA-Z0-9_\x7f-\xff]*//\x7f-\xff表示中文编码
$this是个特殊的变量不能被赋值
除了直接赋值之外可以使用引用对变量进行赋值，改动新的变量会影响原始变量。
$foo = 'bob';
$bar =& $foo;
echo $bar;//bob
$foo = 'bib';
echo $bar;//bib
$bar = "bab";
echo $foo;//bab

预定义变量
超全局变量：在全部作用域始终可用的内置变量，在一个脚本中的全部作用于都可用不用定义global
$GLOBALS引用全局作用域中可用的全部变量，一个包含了全部变量的全局组合数组，变量的名字就是数组的键
不建议使用$GLOBALS，而使用引用传递，避免作用域过大
function test() {
    $foo = "local variable";

    echo '$foo in global scope: ' . $GLOBALS["foo"] . "\n";
    echo '$foo in current scope: ' . $foo . "\n";
}

$foo = "Example content";
test();//$foo in global scope: Example content $foo in current scope: local variable

$_SERVER包含头信息，路径，以及脚本位置等信息
var_dump($_SERVER);
  'USER' => string 'vagrant' (length = 7)
  'HOME' => string '/home/vagrant' (length = 13)
  'FCGI_ROLE' => string 'RESPONDER' (length = 9)
  'QUERY_STRING' => string '' (length = 0)
  'REQUEST_METHOD' => string 'GET' (length = 3)
  'CONTENT_TYPE' => string '' (length = 0)
  'CONTENT_LENGTH' => string '' (length = 0)
  'SCRIPT_FILENAME' => string '/home/vagrant/Code/phpStudy/manual/TEST.php' (length = 43)
  'SCRIPT_NAME' => string '/TEST.php' (length = 9)
  'REQUEST_URI' => string '/TEST.php' (length = 9)
  'DOCUMENT_URI' => string '/TEST.php' (length = 9)
  'DOCUMENT_ROOT' => string '/home/vagrant/Code/phpStudy/manual' (length = 34)
  'SERVER_PROTOCOL' => string 'HTTP/1.1' (length = 8)
  'GATEWAY_INTERFACE' => string 'CGI/1.1' (length = 7)
  'SERVER_SOFTWARE' => string 'nginx/1.8.0' (length = 11)
  'REMOTE_ADDR' => string '192.168.10.1' (length = 12)
  'REMOTE_PORT' => string '63336' (length = 5)
  'SERVER_ADDR' => string '192.168.10.10' (length = 13)
  'SERVER_PORT' => string '80' (length = 2)
  'SERVER_NAME' => string 'manual.app' (length = 10)
  'REDIRECT_STATUS' => string '200' (length = 3)
  'HTTP_HOST' => string 'manual.app' (length = 10)
  'HTTP_CONNECTION' => string 'keep-alive' (length = 10)
  'HTTP_CACHE_CONTROL' => string 'max-age=0' (length = 9)
  'HTTP_UPGRADE_INSECURE_REQUESTS' => string '1' (length = 1)
  'HTTP_USER_AGENT' => string 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/55.0.2883.95 Safari/537.36' (length = 120)
  'HTTP_ACCEPT' => string 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8' (length = 74)
  'HTTP_ACCEPT_ENCODING' => string 'gzip, deflate, sdch' (length = 19)
  'HTTP_ACCEPT_LANGUAGE' => string 'zh-CN,zh;q=0.8' (length = 14)
  'PHP_SELF' => string '/TEST.php' (length = 9)
  'REQUEST_TIME_FLOAT' => float 1488172497.2781
  'REQUEST_TIME' => int 1488172497


$_GET:通过url参数传递给当前脚本的变量数组
$_POST:通过http post传递给当前脚本的变量数组，通过name属性进行查找
$_FILES:通过http post上传的文件数组
$_REQUSET:默认情况下包含了 $_GET，$_POST 和 $_COOKIE 的数组
          这个数组的项目和依赖顺序决定于php.ini的variables_order//不建议使用
          在脚本运行时，改变$_GET，$_POST的值，$_REQUSET不会变
    $_GET['foo'] = 'a';
    $_POST['bar'] = 'b';
    var_dump($_GET); //   'foo' => string 'a' (length=1)
    var_dump($_POST); //   'bar' => string 'b' (length=1)
    var_dump($_REQUEST); // empty
$_SESSION:可用session变量的数组
$_ENV:通过环境方式传递给脚本的数组
$_COOKIE通过http cookie传递给脚本的数组
$argv传递给脚本的参数数组

变量范围
global关键字:
$a=1;$b=2;
function test(){
    global $a,$b;
    $b=$a+$b;
}
test();
echo $b;
将会输出3，在函数中声明全局变量$a和$b之后，对任一变量的引用都会指向其全局版本。
可以利用$GLOBAL替换global，上述脚本可以写为
$a=1;$b=2;
function test(){
    $GLOBALS['b']=$GLOBALS['a']+$GLOBALS['b'];
}
test();
echo $b;

在子函数中声明的global变量对父函数的变量不起作用。
function father(){
    $var=9;
    function child(){
        global $var;
        echo $var;
    }
    child();
}
father();//输出为空

function father(){
    global $var;
    $var=9;
    function child(){
        global $var;
        echo $var;
    }
    child();
}
father();输出9

使用static静态变量：
function test(){
    static $a=0;
    echo $a;
    $a++;
}
test();//0
test();//1
test();//2
$a在第一次调用test()时初始化，之后每次调用test()，每次输出$a，然后加1。

静态变量不会随着继承保持，静态变量会为父类和子类生成两份
class A
{
    function Z(){
        static $a=0;
        printf('class name:%s,$a:%d</br>',get_class($this),$a);
        $a++;
    }
}
class B extends A{}
$a=new A;
$b=new B;
$a->Z();//class name:A,$a:0
$a->Z();//class name:A,$a:1
$b->Z();//class name:B,$a:0
$a->Z();//class name:A,$a:2

静态变量和递归函数：
静态变量也提供了一种处理递归函数的方法。递归函数调用自身
function test(){
    static $a=0;
    echo $a;
    $a++;
    if($a<10){
        test();
    }
}
test();//输出1到9

静态声明是在编译时候进行解析的，如果声明时用表达式的结果对其赋值会导致解析错误。
static $a = 0;//正确
static $b = $a;//错误
static $c = sqrt(12);//错误
可以先声明，后赋值，如
static $b;
$b=$a;
static $c;
$c = sqrt(12);

for($j=0; $j<3; $j++)
{
    if($j == 1)
        $a = 4;
}
echo $a;
循环内if模块内声明的变量在模块外也可以使用


可变变量：一个变量名可以动态的设置和使用。一个普通的变量通过声明来设置
$a='hello';
$$a='world';
echo $$a;   //world
echo $hello;//world

将可变变量用作数组时：[]运算符先于$
class foo {
    var $bar = 'I am bar.';
    var $arr = array('I am A.', 'I am B.', 'I am C.');
    var $r   = 'I am r.';
}

$foo = new foo();
$bar = 'bar';
$baz = array('foo', 'bar', 'baz', 'quux');
echo $foo->$bar . "\n";//I am bar.
echo $foo->$baz[1] . "\n";//I am bar.

$start = 'b';
$end   = 'ar';
echo $foo->{$start . $end} . "\n";//I am bar.

$arr = 'arr';
echo $foo->$arr[1] . "\n";//I am r.
echo $foo->{$arr}[1] . "\n";//I am B.


$a = 'variable-name';
$$a = 'hello';
echo $variable-name . ' ' . $$a; // 输出0 hello,variable-name不符合命名规范

$foo = 'info';
{'php'."$foo"}(); // Parse error函数名的部分不能拆开
$func = "php$foo";
$func(); //可以这样


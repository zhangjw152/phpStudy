函数的参数
通过引用传递参数：
默认情况下，函数参数通过值参数，函数内部修改参数的值，并不会改变函数外部的值。如果希望允许函数修改它的参数值，必须通过引用传递参数。
如果想要函数的一个参数总是通过引用传递，可以在函数定义中该参数的前面加上符号&。
function addSomeStr(&$instr){
    $instr.=',and something extra';
}
$outstr='this is a thing';
addSomeStr($outstr);
echo $outstr;//this is a thing,and something extra

默认参数值
function eat($food='rice'){
    return $food;
}
echo eat().'<br />';
echo eat(null).'<br />';
echo eat('noodle').'<br />';

可以指定参数类型：
在5.1版本中可以指定参数类型为array
在7.0版本中可以指定参数类型为bool，int，float，string
加入传递的参数和函数定义的参数类型不一致，会返回一个错误。
默认的是弱类型，php会尽可能将传递来的不符合类型定义的参数转化为符合类型定义的参数，
例如，当函数的的指定类型为string类型，会将传过来的int类型转化为string类型。
当声明为严格类型的时候，如果传过来的参数类型与制定的不一致，会报错。
弱类型：
function sum(int $a, int $b) {
    return $a + $b;
}

var_dump(sum(1, 2));//int (3)
var_dump(sum(1.5, 2.5));// (3)

强类型：
declare(strict_types=1);

function sum(int $a, int $b) {
    return $a + $b;
}
var_dump(sum(1, 2));//3
var_dump(sum(1.5, 2.5));//会报错

可变数量的参数列表
...可在用户自定义的函数中支持可变数量的参数列表
function sum(...$nums)
{
    $sum = 0;
    foreach ($nums as $num) {
        $sum += $num;
    }
    return $sum;
}
echo sum(2,45,7,8);


在php7，指定了返回类型，当为弱类型时，会将返回值结果转化为函数定义的返回类型；
当为强类型时，函数结果类型和定义返回类型不一致时，会返回错误。
function sum($a, $b): float {
    return $a + $b;
}
var_dump(sum(1, 2));//返回float(3)

declare(strict_types=1);

function sum($a, $b): int {
    return $a + $b;
}
var_dump(sum(1, 2));int(3)
var_dump(sum(1, 2.5));会报错


可变函数：类和类中的方法都可以用数组变量进行表示
class Foo
{
    static function baz()//静态方法
    {
        echo 'baz';
    }

    function bar()
    {
        echo 'bar';
    }
}
$baz=array('Foo','baz');
$bar=array(new Foo,'bar');
$baz();//baz
$bar();//bar

匿名函数也叫闭包函数
允许临时创建一个没有指定名称的函数。最经常用作回调函数参数的值
echo preg_replace_callback('~-([a-z])~', function ($match) {
    return strtoupper($match[1]);
}, 'hello-world');//返回helloWorld

闭包函数可以作为变量来使用
$greet = function ($name) {
    echo 'hello' . $name;
};
$greet('world');

闭包可以从父作用域中继承变量,变量用use结构传递进去,这些变量都应该在函数或类的头部声明。
$greet = 'hello';
$message = function () use ($greet) {
    echo $greet;
};
$message();

class cart
{
    const PRICE_BUTTER = 1.00;
    const PRICE_MILK = 3.00;
    const PRICE_EGGS = 6.95;

    protected $products = array();

    public function add($product, $quality)
    {
        $this->products[$product] = $quality;
    }

//    public function getQuality($product)
//    {
//        return isset($this->products[$product]) ? $this->products[$product] : false;
//    }

    public function getTotal($tax)
    {
//        var_dump($this->products);
        $total = 0.00;
        $callback = function ($quality, $product) use ($tax, &$total) {
            $pricePerItem = constant(__CLASS__ . '::PRICE_' . strtoupper($product));
            $total += $pricePerItem * $quality * ($tax + 1);
        };
        array_walk($this->products, $callback);
        return round($total, 2);
    }
}

$cart = new cart();

$cart->add('butter', 2);
$cart->add('milk', 1);
$cart->add('eggs', 8);
print $c



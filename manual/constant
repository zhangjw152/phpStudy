常量：
可以用define()来定义常量，或者在类外边用const关键字定义
常量和变量的区别：
常量前面没有$;
常量只能通过define和const定义，不能通过赋值语句；
常量不用理会变量的作用域而在任何地方定义语句；
常量一旦定义，不能重新定义或者取消定义；
常量只能是标量：boolean，integer,float,string。

使用const关键字定义常量必须位于最顶端的作用区域。

魔术常量：
PHP向它运行的任何脚本提供了大量的预定义常量。
有八个魔术常量的值随着他们在代码中的位置改变而改变,这些特殊常量不区分大小写：
__LINE__，文件中的当前行号；
__FILE__,文件的完整路径和文件名。如果用在被包含的文件中，则返回被包含的文件名；
__DIR__，文件所在目录。如果用在被包含的文件中，则返回被包含的文件所在目录。除非是根目录，否则目录中名不包含末尾的斜杠；
__FUNCTION__,函数名称。返回该函数被定义的名字。
__CLASS__，类的名称。返回类被定义时的名字，当用在trait方法中时，__CLASS__调用trait方法的类名；
__TRAIT__，Trait的名字。返回Trait被定义时的名称。Trait名包含被声明的作用区域；
__METHOD__，类的方法名。返回该方法被定义时的名字；
__NAMESPACE__,返回当前的命名空间

__FUNCTION__和__METHOD__的区别：
__FUNCTION__只返回函数名称。
__METHOD__返回类名和函数名。
class trick
{
    function a(){
        echo __FUNCTION__;
    }

    function b(){
        echo __METHOD__;
    }
}
$obj=new trick();
$obj->a();//a
$obj->b();//trick::b


__CLASS__,get_class(),get_called_class()的区别：
__CLASS__是静态绑定，如果不在子类里重载的话，那么继承父类方法所得到的依旧是父类的名称，而不是子类的名称，如：
class A
{
    function __construct()
    {
        echo __CLASS__;
    }

    static function name()
    {
        echo __CLASS__;
    }
}

class B extends A
{
}

$b = new B();//A
B::name();//A
无论实例化还是直接调用静态方法，子类__CLASS__都是输出父类的类名。

在不带参数时get_class()的返回结果和__CLASS__相同。
class A
{
    function __construct()
    {
        echo get_class();
    }

    static function name()
    {
        echo get_class();
    }
}

class B extends A
{
}

$b = new B();//A
B::name();//A

get_class($this)得到调用类本身的类名
class A
{
    function __construct()
    {
        echo get_class($this);
    }
}

class B extends A
{
}

$b = new B();//B

get_called_class()得到当前主调类的类名
class A
{
    function __construct()
    {
        echo get_called_class();
    }

    static function name()
    {
        echo get_called_class();
    }
}

class B extends A
{
}

$b = new B();//B
B::name();//B






